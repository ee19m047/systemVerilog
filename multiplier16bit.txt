//Design module

module mul(a,b,m);
  input [15:0] a,b;
  output [31:0] m;
  
  assign m = a * b;
  
endmodule









// Code your testbench here
// or browse Examples
class transaction;
  randc bit [15:0] a;
  randc bit [15:0] b;
  bit [31:0] m;
endclass

class generator;
  
  transaction t;
  mailbox mbx;
  event done;
  integer i;
  
  function new(mailbox mbx);
    this.mbx = mbx;
  endfunction
  
  task run();
    t = new();
    
    for(i = 0;i<20;i++) begin
      t.randomize();
      mbx.put(t);
      $display("[GEN]: Data send to driver");
      @(done);
     #10;
    end
  endtask
endclass

interface mul_intf();
  logic [15:0] a;
  logic [15:0] b;
  logic [31:0] m;
endinterface

class driver;
  
  transaction t;
  mailbox mbx;
  event done;
  
  virtual mul_intf vif;
  
  function new(mailbox mbx);
    this.mbx = mbx;
  endfunction
  
  task run();
    t = new();
    forever begin
      mbx.get(t);
      vif.a = t.a;
      vif.b = t.b;
      $display("[DRV]: Interface Triggered");
      ->done;
     #10;
    end
  endtask
endclass

class monitor;
  
  transaction t;
  mailbox mbx;
  
  virtual mul_intf vif;
  
  function new(mailbox mbx);
    this.mbx = mbx;
  endfunction
  
  task run();
    t = new();
    forever begin
      t.a = vif.a;
      t.b = vif.b;
      t.m = vif.m;
      mbx.put(t);
      $display("[MON]: Data put on scoreboard");
      #10;
    end
  endtask
endclass

class scoreboard;
  
  transaction t;
  mailbox mbx;
  
  bit [31:0] temp;
  
  function new(mailbox mbx);
    this.mbx = mbx;
  endfunction
  
  task run();
    t = new();
    
    forever begin
      mbx.get(t);
      
      temp = t.a * t.b;
      
      if(t.m == temp)
        begin
          $display("a: %d, b: %d, m: %d, temp: %d",t.a,t.b,t.m,temp);
          $display("[SCO]: Test passed");
        end
      else
        begin
          $display("a: %d, b: %d, m: %d, temp: %d",t.a,t.b,t.m,temp);
          $display("[SCO]: Test Failed");
        end
      #10;
    end
  endtask
endclass

class environment;
  generator gen;
  driver drv;
  monitor mon;
  scoreboard sco;
  
  virtual mul_intf vif;
  
  mailbox gdmbx;
  mailbox msmbx;
  
  event gddone;
  
  function new(mailbox gdmbx, mailbox msmbx);
    this.gdmbx = gdmbx;
    this.msmbx=  msmbx;
    
    gen = new(gdmbx);
    drv = new(gdmbx);
    
    mon = new(msmbx);
    sco = new(msmbx);
   
  endfunction
  
  task run();
    
    drv.vif = vif;
    mon.vif = vif;
    
    drv.done = gddone;
    gen.done = gddone;
    
    fork
      gen.run();
      drv.run();
      mon.run();
      sco.run();
    join_any
  endtask
endclass

module tb;
  
  environment env;
  mailbox gdmbx;
  mailbox msmbx;
  
  mul_intf vif();
  
  mul dut (vif.a,vif.b,vif.m);
  
  initial begin
    $dumpvars;
    $dumpfile("dump.vcd");
  end
  
  initial begin
    gdmbx = new();
    msmbx = new();
    
    env = new(gdmbx,msmbx);
    
    env.vif = vif;
    
    env.run();
    #500;
    $finish;
  end
 
endmodule
    