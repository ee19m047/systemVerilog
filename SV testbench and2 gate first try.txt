
///AND2 Design

module and2(a,b,y);
  input [3:0] a;
  input [3:0] b;
  output [3:0] y;
  
  assign y = a & b;
  
endmodule


///SV Testbench

// Code your testbench here
// or browse Examples
class transaction;
  randc bit [3:0] a;
  randc bit [3:0] b;
  bit [3:0] y;
  
endclass

interface and2_intf();
  logic [3:0] a;
  logic [3:0] b;
  logic [3:0] y;
  
endinterface

class generator;
  transaction t;
  mailbox mbx;
  event done;
  
  integer i;
  
  function new(mailbox mbx);
    this.mbx = mbx;
  endfunction
  
  task run();
    t = new();
    
    for(i=0;i<25;i++) begin
      t.randomize();
      mbx.put(t);
      $display("[GEN]: %d and %d has sent to the driver",t.a,t.b);
      #10;
    end
    ->done;
  endtask
endclass

class driver;
  
  transaction t;
  mailbox mbx;
  
  virtual and2_intf vif;
  
  function new(mailbox mbx);
    this.mbx = mbx;
  endfunction
  
  task run();
    t = new();
    
    forever begin
      mbx.get(t);
      vif.a = t.a;
      vif.b = t.b;
      $display("[DRV]: %d and %d received from generator",t.a,t.b);
      #10;
    end
  endtask
endclass

class monitor;
  
  transaction t;
  mailbox mbx;
  
  virtual and2_intf vif;
  
  function new(mailbox mbx);
    this.mbx = mbx;
  endfunction
  
  task run();
    t = new();
    t.a = vif.a;
    t.b = vif.b;
    t.y = vif.y;
    mbx.put(t);
    $display("[MON]: a: %d b: %d and y: %d has sent to the scoreboard",t.a,t.b,t.y);
    #10;
  endtask
endclass

class scoreboard;
  transaction t;
  mailbox mbx;
  
  bit [3:0] temp;
  
  function new(mailbox mbx);
    this.mbx = mbx;
  endfunction
  
  task run();
    t = new();
    
    forever begin
      mbx.get(t);
      temp = t.a & t.b;
      
      if(t.y == temp)
        begin
          $display("[SCO]: Test passed");
          $display("a: %d, b: %d, y: %d, temp: %d",t.a,t.b,t.y,temp);
        end
      else
        begin
          $display("[SCO]: Test Failed");
        end
      #10;
    end
  endtask
endclass


module tb;
  generator gen;
  driver drv;
  monitor mon;
  scoreboard sco;
  mailbox msmbx;
  
  and2_intf vif();
  
  and2 dut(vif.a,vif.b,vif.y);
  
  initial begin
    msmbx = new();
    gen = new(msmbx);
    drv = new(msmbx);
    sco = new(msmbx);
    mon = new(msmbx);
    
    drv.vif = vif;
    mon.vif = vif;
    
    fork
      gen.run();
      drv.run();
      mon.run();
      sco.run();
    join_any
    wait(gen.done.triggered);
  end
  
  initial begin
    $dumpvars;
    $dumpfile("dump.vcd");
  end
  
  initial begin
    #500;
    $finish;
  end
endmodule